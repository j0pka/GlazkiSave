//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bocharova_Glazki
{
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Linq;
    using System.Windows.Media;

    /// 

    public partial class Agent
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Agent()
        {
            this.AgentPriorityHistory = new HashSet<AgentPriorityHistory>();
            this.ProductSale = new HashSet<ProductSale>();
            this.Shop = new HashSet<Shop>();
        }

        public int ID { get; set; }
        public string Title { get; set; }
        public int AgentTypeID { get; set; }
        public string Address { get; set; }
        public string INN { get; set; }
        public string KPP { get; set; }
        public string DirectorName { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string Logo { get; set; }
        public int Priority { get; set; }

        public virtual AgentType AgentType { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<AgentPriorityHistory> AgentPriorityHistory { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductSale> ProductSale { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Shop> Shop { get; set; }

        public string AgentTypeString
        {
            get
            {
                return AgentType.Title;
            }
        }

        public double Discount
        {
            get
            {
                int saleCount = SaleProductCount;

                // Логика расчета скидки
                if (saleCount > 500000)
                {
                    return 0.25; // 25% скидка
                }
                if (saleCount > 50000)
                {
                    return 0.1; // 10% скидка
                }
                if (saleCount > 150000)
                {
                    return 0.2; // 20% скидка
                }
                else if (saleCount > 10000)
                {
                    return 0.05; // 5% скидка
                }
                else if (saleCount > 0)
                {
                    return 0; // 0% скидка
                }
                else
                {
                    return 0; // Нет продаж - 0% скидка
                }
            }
        }
        public int SaleProductCount
        {
            get
            {
                // Пример: подсчет количества проданных товаров для текущего агента
                var saleProducts = Bocharova_GlazkiEntities.GetContext().ProductSale
                .Where(p => p.AgentID == ID)
                .ToList();

                // Используйте условный оператор для проверки наличия элементов и суммируйте ProductCount
                return saleProducts.Any() ? saleProducts.Sum(p => p.ProductCount) : 0;
            }
        }

        public SolidColorBrush FontStyle
        {
            get
            {
                if (SaleProductCount >= 500000) return (SolidColorBrush)new BrushConverter().ConvertFromString("LightGreen");
                else return (SolidColorBrush)new BrushConverter().ConvertFromString("White");
            }
        }
    }

    // Добавьте свойство для подсчета количества проданных товаров
}



